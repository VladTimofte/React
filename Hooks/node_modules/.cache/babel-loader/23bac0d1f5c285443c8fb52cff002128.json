{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\React_Courses\\\\Hooks\\\\src\\\\components\\\\UseRef.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport '../styles/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Ref() {\n  _s();\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const count = useRef(0);\n  const [inputValue1, setInputValue1] = useState(\"\");\n  const previousInputValue1 = useRef(\"\");\n  useEffect(() => {\n    previousInputValue1.current = inputValue1;\n  }, [inputValue1]);\n  useEffect(() => {\n    count.current = count.current + 1;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"BkgColor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"useRef hook:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type in...\",\n      value: (inputValue, inputValue1),\n      onChange: e => setInputValue(e.target.value) & setInputValue1(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Current Value: \", inputValue1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Previous Value: \", previousInputValue1.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Render Count: \", count.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Ref, \"7yvQ96RDMUtpDaVztei/yLLjOkU=\");\n\n_c = Ref;\nexport default Ref;\n/*\r\nTry typing in the input field, and you will\r\nsee the application render conut increase.\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Ref\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/React_Courses/Hooks/src/components/UseRef.js"],"names":["useState","useEffect","useRef","Ref","inputValue","setInputValue","count","inputValue1","setInputValue1","previousInputValue1","current","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAO,qBAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMM,KAAK,GAAGJ,MAAM,CAAC,CAAD,CAApB;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMS,mBAAmB,GAAGP,MAAM,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfQ,IAAAA,mBAAmB,CAACC,OAApB,GAA8BH,WAA9B;AACA,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACfK,IAAAA,KAAK,CAACI,OAAN,GAAgBJ,KAAK,CAACI,OAAN,GAAgB,CAAhC;AACA,GAFQ,CAAT;AAIA,sBACC;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AACC,MAAA,IAAI,EAAC,MADN;AAEC,MAAA,WAAW,EAAC,YAFb;AAGC,MAAA,KAAK,GAAEN,UAAU,EAAEG,WAAd,CAHN;AAIC,MAAA,QAAQ,EAAGI,CAAD,IAAON,aAAa,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb,GAAgCL,cAAc,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV;AAJhE;AAAA;AAAA;AAAA;AAAA,YAFD,eAQC;AAAA,oCAAoBN,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA,YARD,eASC;AAAA,qCAAqBE,mBAAmB,CAACC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,YATD,eAUC;AAAA,mCAAmBJ,KAAK,CAACI,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAVD,eAWC;AAAA;AAAA;AAAA;AAAA,YAXD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAeA;;GA7BQP,G;;KAAAA,G;AA+BT,eAAeA,GAAf;AAEA;AACA;AACA;AACA","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport '../styles/style.css'\r\n\r\nfunction Ref() {\r\n\tconst [inputValue, setInputValue] = useState(\"\");\r\n\tconst count = useRef(0);\r\n\tconst [inputValue1, setInputValue1] = useState(\"\");\r\n\tconst previousInputValue1 = useRef(\"\");\r\n\r\n\tuseEffect(() => {\r\n\t\tpreviousInputValue1.current = inputValue1;\r\n\t}, [inputValue1]);\r\n\r\n\tuseEffect(() => {\r\n\t\tcount.current = count.current + 1;\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"BkgColor\">\r\n\t\t\t<h3>useRef hook:</h3>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Type in...\"\r\n\t\t\t\tvalue={inputValue, inputValue1}\r\n\t\t\t\tonChange={(e) => setInputValue(e.target.value) & setInputValue1(e.target.value)}\r\n\t\t\t/>\r\n\t\t\t<h2>Current Value: {inputValue1}</h2>\r\n\t\t\t<h2>Previous Value: {previousInputValue1.current}</h2>\r\n\t\t\t<h1>Render Count: {count.current}</h1>\r\n\t\t\t<hr></hr>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Ref\r\n\r\n/*\r\nTry typing in the input field, and you will\r\nsee the application render conut increase.\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}